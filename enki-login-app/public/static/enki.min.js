"use strict";function Enki(e){this.web3js=null,"undefined"!=typeof web3?this.web3js=new Web3(web3.currentProvider):(console.log("No web3? You should consider trying MetaMask!"),this.web3js=new Web3(new Web3.providers.HttpProvider("https://rinkeby.infura.io/"))),this._context={domain:e},this.ETH_NETWORKS={1:"Mainnet",2:"Morden",3:"Ropsten",4:"Rinkeby",42:"Kovan"};var n=this;Enki.prototype.fetchNetworkId=function(){return new Promise(function(e,t){n.web3js.version.getNetwork(function(o,r){return o?(n._context.netId=null,t(o)):(n._context.netId=r,e(r))})})},Enki.prototype.cachedAccounts=function(){return n._context.accounts},Enki.prototype.fetchAccounts=function(){return new Promise(function(e,t){n.web3js.eth.getAccounts(function(n,o){return n?t(n):e(o)})}).then(function(e){n._context.accounts=e,console.log("Got accounts: "),console.log(e)}).catch(function(e){alert("Could not fetch accounts!"),console.log(e),n._context.accounts=null})},Enki.prototype.getBalance=function(e){return new Promise(function(t,o){n.web3js.eth.getBalance(e,function(n,t){if(!n){var r=t.toNumber()/1e18;return console.log("Balance for the account "+e+" is "+r),r}console.error(n),o(n)})})},Enki.prototype.startApp=function(){return Enki.prototype.fetchNetworkId().catch(function(e){alert("Could not retrieve Network ID!")}).then(function(e){return Enki.prototype.fetchAccounts().then(function(n){return{netId:e,accounts:n}})})},Enki.prototype.getServerNonce=function(){return axios.get("/nonce").then(function(e){return e.data}).catch(function(e){return alert("Could not obtain nonce from the server"),console.log(e),null})},Enki.prototype.prepareBaseMsg=function(e,t){return Enki.prototype.getServerNonce().then(function(o){var r=uuidv4(),c=+new Date,i={netId:n._context.netId,domain:n._context.domain,intent:t,serverNonce:o.serverNonce,serverEpoch:o.serverEpoch,clientNonce:r,clientEpoch:c,email:e.email};return console.log(i),{acct:e.acct,rawObj:i}})},Enki.prototype.prepareSignupMsg=function(e){return Enki.prototype.prepareBaseMsg(e,"SIGNUP").then(function(n){n.url="/signup",n.rawObj.fullName=e.fullName;var t=n.rawObj.netId+n.rawObj.domain+n.rawObj.intent+n.rawObj.serverNonce+n.rawObj.serverEpoch+n.rawObj.clientNonce+n.rawObj.clientEpoch+n.rawObj.email+n.rawObj.fullName;return n.msg=t,n})},Enki.prototype.prepareLoginMsg=function(e){return Enki.prototype.prepareBaseMsg(e,"LOGIN").then(function(e){e.url="/login";var n=e.rawObj.netId+e.rawObj.domain+e.rawObj.intent+e.rawObj.serverNonce+e.rawObj.serverEpoch+e.rawObj.clientNonce+e.rawObj.clientEpoch+e.rawObj.email;return e.msg=n,e})},Enki.prototype.signMessage=function(e){var t="0x"+keccak256(e.msg);return axios.defaults.headers["Content-Type"]="application/vnd.api+json",axios.defaults.headers.Accept="application/vnd.api+json",new Promise(function(o,r){n.web3js.eth.sign(e.acct,t,function(e,n){return e?(alert(e),r(e)):o(n)})}).then(function(n){console.log("Sending the signature: "+n);var t={acct:e.acct,rawObj:e.rawObj,signature:n};return axios.post(e.url,t,{headers:{"Content-Type":"application/json;charset=UTF-8"}}).then(function(n){console.log(n),alert("Response from "+e.url+": "+JSON.stringify(n.data))}).catch(function(e){alert("Could not send the signed message"),console.log(e)})})}}module.exports=Enki;
